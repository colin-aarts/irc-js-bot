// Generated by IcedCoffeeScript 1.3.3b
(function() {
  'use strict';

  var convert, http, iced, shorten, util, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = __iced_k_noop = function() {};

  util = require('util');

  http = require('http');

  shorten = require('goo.gl');

  module.exports = function() {
    var _this = this;
    return this.register_special_command({
      name: '$',
      description: 'Perform currency conversion or retrieve exchange rate.',
      admin_only: false,
      fn: function(event, input_data, output_data) {
        var amount, api_key, args_match, err, from, message, result, to, ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        api_key = _this.bot_options.plugin_options['irc-js-bot-currency_conversion'].api_key;
        if (!api_key) return;
        (function(__iced_k) {
          if (__indexOf.call(input_data.flags, '?') >= 0) {
            return __iced_k(message = '$ <from> <to> [<amount>] • Perform currency conversion or retrieve exchange rate. If <amount> is not specified, shows exchange rate. <from> and <to> must be three-letter country codes.');
          } else {
            (function(__iced_k) {
              if (!input_data.args) {
                return __iced_k(message = "Insifficient arguments specified for currency conversion command. See " + input_data.trigger + "$/? for details.");
              } else {
                args_match = input_data.args.match(/^(\w{3})\s+(\w{3})(\s+([\d\.,]+))?$/);
                (function(__iced_k) {
                  if (!args_match) {
                    return __iced_k(message = "Invalid format specified for currency conversion command. See " + input_data.trigger + "$/? for details.");
                  } else {
                    from = args_match[1].toUpperCase();
                    to = args_match[2].toUpperCase();
                    amount = args_match[4] ? args_match[4].replace(',', '.') : '';
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "node_modules\irc-js-bot-currency_conversion\index.coffee",
                        funcname: "fn"
                      });
                      convert(from, to, amount, api_key, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            err = arguments[0];
                            return result = arguments[1];
                          };
                        })(),
                        lineno: 44
                      }));
                      __iced_deferrals._fulfill();
                    })(function() {
                      result = +result;
                      if (err) message = 'Oops, something went wrong!';
                      return __iced_k(!amount ? message = "Current exchange rate " + from + " → " + to + " is " + result : message = "" + amount + " " + from + " is currently " + result + " " + to);
                    });
                  }
                })(__iced_k);
              }
            })(__iced_k);
          }
        })(function() {
          return _this.send(output_data.method, output_data.recipient, message);
        });
      }
    });
  };

  convert = function(from, to, amount, api_key, cb) {
    var req, result;
    result = [];
    req = http.request({
      hostname: 'www.exchangerate-api.com',
      path: "/" + from + "/" + to + "/" + amount + "?k=" + api_key,
      method: 'get'
    }, function(res) {
      res.setEncoding('utf-8');
      res.on('data', function(data) {
        return result.push(data);
      });
      return res.on('end', function() {
        var err;
        result = result.join('');
        if (!result) err = true;
        return cb(err, result);
      });
    });
    req.on('error', function(err) {
      return cb(err, null);
    });
    return req.end();
  };

}).call(this);
