
#	irc-bot-js-w3c
#	--------------
#	W3C validator services for irc-js-bot
#	This is an official plug-in
#
#	Provides one bot command: 'v'
#	Depends on the 'xml2js' and 'goo.gl' modules

'use strict'


util    = require 'util'
http    = require 'http'
shorten = require 'goo.gl'
xml2js  = new (require 'xml2js').Parser
js      = (require 'js-extensions').local


module.exports = ->

	@register_special_command
		name: 'v'
		description: 'Check a resource with the W3C markup and CSS validators.'
		admin_only: false
		fn: (event, input_data, output_data) =>

			# Determine the URI
			if input_data.args
				uri = input_data.args
			else if output_data.recipient[0] is '#' and @backlog[output_data.recipient]
				uri = do =>
					# Check the backlog for a URI
					for message in @backlog[output_data.recipient]
						uri_match = message.match /https?:\/\/\S+/
						return uri_match[0] if uri_match
			else return

			return if not uri

			uri_truncated = js.str_truncate uri, 20, 10, '…'

			# Markup
			validate 'markup', uri, (err, result) =>
				if err
					message = "Oops, something went wrong trying to validate the markup for « #{uri_truncated} »"
				else if not result?['env:Body']?['m:markupvalidationresponse']
					message = "Could not get a valid response from the markup validation service for « #{uri_truncated} »"
				else
					validity = if result['env:Body']['m:markupvalidationresponse']['m:validity'] is 'true' then 'valid' else 'invalid'
					errors   = result['env:Body']['m:markupvalidationresponse']['m:errors']['m:errorcount']
					warnings = result['env:Body']['m:markupvalidationresponse']['m:warnings']['m:warningcount']
					charset  = result['env:Body']['m:markupvalidationresponse']['m:charset']
					doctype  = result['env:Body']['m:markupvalidationresponse']['m:doctype'] or 'no doctype!'
					doctype  = do ->
						if      /XHTML 1.1/i.test doctype then 'XHTML 1.1'
						else if /XHTML 1.0 Frameset/i.test doctype then 'XHTML 1.0 Frameset'
						else if /XHTML 1.0 Transitional/i.test doctype then 'XHTML 1.0 Transitional'
						else if /XHTML 1.0 Strict/i.test doctype then 'XHTML 1.0 Strict'
						else if /HTML 4.01 Frameset/i.test doctype then 'HTML 4.01 Frameset'
						else if /HTML 4.01 Transitional/i.test doctype then 'HTML 4.01 Transitional'
						else if /HTML 4.01 Loose/i.test doctype then 'HTML 4.01 Transitional'
						else if /HTML 4.01/i.test doctype and /strict/i.test doctype then 'HTML 4.01 Strict'
						else doctype

					await shorten "http://validator.w3.org/check?uri=#{encodeURIComponent uri}", defer shorten_err, short_uri

					message = "« #{uri_truncated} » markup • errors: #{errors} • warnings: #{warnings} • doctype: #{doctype} • charset: #{charset} • validation result: #{short_uri}"

				@send output_data.method, output_data.recipient, message

			# CSS
			validate 'css', uri, (err, result) =>
				if err
					message = "Oops, something went wrong trying to validate the CSS for « #{uri_truncated} »"
				else if not result?['env:Body']?['m:cssvalidationresponse']
					message = "Could not get a valid response from the CSS validation service for « #{uri_truncated} »"
				else
					validity = if result['env:Body']['m:cssvalidationresponse']['m:validity'] is 'true' then 'valid' else 'invalid'
					profile  = result['env:Body']['m:cssvalidationresponse']['m:csslevel']
					errors   = result['env:Body']['m:cssvalidationresponse']['m:result']['m:errors']['m:errorcount']
					warnings = result['env:Body']['m:cssvalidationresponse']['m:result']['m:warnings']['m:warningcount']

					await shorten "http://jigsaw.w3.org/css-validator/validator?uri=#{encodeURIComponent uri}&profile=css3", defer shorten_err, short_uri

					message = "« #{uri_truncated} » CSS • errors: #{errors} • warnings: #{warnings} • profile: #{profile} • validation result: #{short_uri}"

				@send output_data.method, output_data.recipient, message


validate = (which, uri, cb) ->

	result = []

	hostname = switch which
		when 'markup' then 'validator.w3.org'
		when 'css'    then 'jigsaw.w3.org'

	path = switch which
		when 'markup' then "/check?uri=#{uri}&output=soap12"
		when 'css'    then "/css-validator/validator?uri=#{uri}&output=soap12&profile=css3"

	req = http.request
		hostname: hostname
		path: path
		method: 'get'
	, (res) ->
		res.setEncoding 'utf-8'
		res.on 'data', (data) ->
			result.push data
		res.on 'end', ->
			result = result.join ''
			xml2js.parseString result, (err, result) ->
				err = true if not result
				cb err, result

	req.on 'error', (err) ->
		cb err, null

	do req.end
