// Generated by IcedCoffeeScript 1.3.3b
(function() {
  'use strict';

  var http, iced, js, shorten, util, validate, xml2js, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = __iced_k_noop = function() {};

  util = require('util');

  http = require('http');

  shorten = require('goo.gl');

  xml2js = new (require('xml2js')).Parser;

  js = (require('js-extensions')).local;

  module.exports = function() {
    var _this = this;
    return this.register_special_command({
      name: 'v',
      description: 'Check a resource with the W3C markup and CSS validators.',
      admin_only: false,
      fn: function(event, input_data, output_data) {
        var uri, uri_truncated;
        if (input_data.args) {
          uri = input_data.args;
        } else if (output_data.recipient[0] === '#' && _this.backlog[output_data.recipient]) {
          uri = (function() {
            var message, uri_match, _i, _len, _ref;
            _ref = _this.backlog[output_data.recipient];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              message = _ref[_i];
              uri_match = message.match(/https?:\/\/\S+/);
              if (uri_match) return uri_match[0];
            }
          })();
        } else {
          return;
        }
        if (!uri) return;
        uri_truncated = js.str_truncate(uri, 20, 10, '…');
        validate('markup', uri, function(err, result) {
          var charset, doctype, errors, message, short_uri, shorten_err, validity, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          (function(__iced_k) {
            if (err) {
              return __iced_k(message = "Oops, something went wrong trying to validate the markup for « " + uri_truncated + " »");
            } else {
              (function(__iced_k) {
                var _ref;
                if (!(result != null ? (_ref = result['env:Body']) != null ? _ref['m:markupvalidationresponse'] : void 0 : void 0)) {
                  return __iced_k(message = "Could not get a valid response from the markup validation service for « " + uri_truncated + " »");
                } else {
                  validity = result['env:Body']['m:markupvalidationresponse']['m:validity'] === 'true' ? 'valid' : 'invalid';
                  errors = result['env:Body']['m:markupvalidationresponse']['m:errors']['m:errorcount'];
                  warnings = result['env:Body']['m:markupvalidationresponse']['m:warnings']['m:warningcount'];
                  charset = result['env:Body']['m:markupvalidationresponse']['m:charset'];
                  doctype = result['env:Body']['m:markupvalidationresponse']['m:doctype'] || 'no doctype!';
                  doctype = (function() {
                    if (/XHTML 1.1/i.test(doctype)) {
                      return 'XHTML 1.1';
                    } else if (/XHTML 1.0 Frameset/i.test(doctype)) {
                      return 'XHTML 1.0 Frameset';
                    } else if (/XHTML 1.0 Transitional/i.test(doctype)) {
                      return 'XHTML 1.0 Transitional';
                    } else if (/XHTML 1.0 Strict/i.test(doctype)) {
                      return 'XHTML 1.0 Strict';
                    } else if (/HTML 4.01 Frameset/i.test(doctype)) {
                      return 'HTML 4.01 Frameset';
                    } else if (/HTML 4.01 Transitional/i.test(doctype)) {
                      return 'HTML 4.01 Transitional';
                    } else if (/HTML 4.01 Loose/i.test(doctype)) {
                      return 'HTML 4.01 Transitional';
                    } else if (/HTML 4.01/i.test(doctype && /strict/i.test(doctype))) {
                      return 'HTML 4.01 Strict';
                    } else {
                      return doctype;
                    }
                  })();
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "node_modules\irc-js-bot\node_modules\irc-js-bot-w3c\index.coffee"
                    });
                    shorten("http://validator.w3.org/check?uri=" + (encodeURIComponent(uri)), __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          shorten_err = arguments[0];
                          return short_uri = arguments[1];
                        };
                      })(),
                      lineno: 67
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(message = "« " + uri_truncated + " » markup • errors: " + errors + " • warnings: " + warnings + " • doctype: " + doctype + " • charset: " + charset + " • validation result: " + short_uri);
                  });
                }
              })(__iced_k);
            }
          })(function() {
            return _this.send(output_data.method, output_data.recipient, message);
          });
        });
        return validate('css', uri, function(err, result) {
          var errors, message, profile, short_uri, shorten_err, validity, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          (function(__iced_k) {
            if (err) {
              return __iced_k(message = "Oops, something went wrong trying to validate the CSS for « " + uri_truncated + " »");
            } else {
              (function(__iced_k) {
                var _ref;
                if (!(result != null ? (_ref = result['env:Body']) != null ? _ref['m:cssvalidationresponse'] : void 0 : void 0)) {
                  return __iced_k(message = "Could not get a valid response from the CSS validation service for « " + uri_truncated + " »");
                } else {
                  validity = result['env:Body']['m:cssvalidationresponse']['m:validity'] === 'true' ? 'valid' : 'invalid';
                  profile = result['env:Body']['m:cssvalidationresponse']['m:csslevel'];
                  errors = result['env:Body']['m:cssvalidationresponse']['m:result']['m:errors']['m:errorcount'];
                  warnings = result['env:Body']['m:cssvalidationresponse']['m:result']['m:warnings']['m:warningcount'];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "node_modules\irc-js-bot\node_modules\irc-js-bot-w3c\index.coffee"
                    });
                    shorten("http://jigsaw.w3.org/css-validator/validator?uri=" + (encodeURIComponent(uri)) + "&profile=css3", __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          shorten_err = arguments[0];
                          return short_uri = arguments[1];
                        };
                      })(),
                      lineno: 85
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(message = "« " + uri_truncated + " » CSS • errors: " + errors + " • warnings: " + warnings + " • profile: " + profile + " • validation result: " + short_uri);
                  });
                }
              })(__iced_k);
            }
          })(function() {
            return _this.send(output_data.method, output_data.recipient, message);
          });
        });
      }
    });
  };

  validate = function(which, uri, cb) {
    var hostname, path, req, result;
    result = [];
    hostname = (function() {
      switch (which) {
        case 'markup':
          return 'validator.w3.org';
        case 'css':
          return 'jigsaw.w3.org';
      }
    })();
    path = (function() {
      switch (which) {
        case 'markup':
          return "/check?uri=" + uri + "&output=soap12";
        case 'css':
          return "/css-validator/validator?uri=" + uri + "&output=soap12&profile=css3";
      }
    })();
    req = http.request({
      hostname: hostname,
      path: path,
      method: 'get'
    }, function(res) {
      res.setEncoding('utf-8');
      res.on('data', function(data) {
        return result.push(data);
      });
      return res.on('end', function() {
        result = result.join('');
        return xml2js.parseString(result, function(err, result) {
          if (!result) err = true;
          return cb(err, result);
        });
      });
    });
    req.on('error', function(err) {
      return cb(err, null);
    });
    return req.end();
  };

}).call(this);
