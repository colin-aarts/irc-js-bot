
#	js-extensions
#	=============
#	A collection of extensions to the JavaScript standard library.
#
#	@usage: `require('js-extensions').local
#	@usage: `require('js-extensions').global
#
#	• `local` gets you an object with the functions
#	• `global` gets you access to the functions as globals, either on the prototype or on the constructor

'use strict'



#########
###########
#############	AS GLOBALS
###########
#########


set_globals = ->


	#########
	###########
	#############	STRING
	###########
	#########



	#	String::reverse
	#	---------------
	#	(description)

	String::reverse = ->

		ary = @split ''
		ary = ary.reverse()
		str = ary.join ''

		return str



	#	String::truncate
	#	----------------
	#	Truncates a string, keeping characters from the start of the string, from the end of the string, or both, whilst applying an optional delimiter string.
	#	This method can therefore also be used to trim characters from the start or end of a string, by supplying `0` for the opposite direction.
	#
	#	TODO: Handle (start + end) > str.length
	#
	#	@param		str			(str)		the subject
	#	@param		start		(int)		the number of characters to keep from the start of the string
	#	@param		end			(int)		the number of characters to keep from the end of the string
	#	@param		delimiter	(string)	glue
	#
	#	@returns				(string)	the truncated string

	String::truncate = (start, end, delimiter = '') ->

		return @ if not start? and not end?

		start ?= 0
		end ?= 0

		if @length > (start + end)
			return (@substr 0, start) + delimiter + (@substr -end, end)
		else
			return @





	#########
	###########
	#############	REGEXP
	###########
	#########



	#	RegExp.escape
	#	-------------
	#	Escapes characters with special meaning in regular expressions.
	#	Useful for passing arbitrary strings to the RegExp ctor.
	#
	#	@param		str			(str)		the string to escape characters in
	#
	#	@returns				(str)		the escaped string

	RegExp.escape = (str) ->

		return str if typeof str isnt 'string'
		return str.replace /[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&'




#########
###########
#############	AS LOCALS
###########
#########


locals =


	#########
	###########
	#############	STRING
	###########
	#########



	#	str_reverse

	str_reverse: (str) ->

		return if typeof str isnt 'string'

		ary = str.split ''
		ary = ary.reverse()
		str = ary.join ''

		return str



	#	str_truncate

	str_truncate: (str, start, end, delimiter = '') ->

		return str if not start? and not end?

		start ?= 0
		end ?= 0

		if str.length > (start + end)
			return (str.substr 0, start) + delimiter + (str.substr -end, end)
		else
			return str





	#########
	###########
	#############	REGEXP
	###########
	#########



	#	re_escape

	re_escape: (str) ->

		return str if typeof str isnt 'string'
		return str.replace /[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&'





#########
###########
#############	EXPORTS
###########
#########


Object.defineProperties module.exports,
	global:
		get: -> set_globals()
		enumerable: true
	local:
		value: locals
		enumerable: true
