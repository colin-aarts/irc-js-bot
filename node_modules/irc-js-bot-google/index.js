// Generated by IcedCoffeeScript 1.3.3b
(function() {
  'use strict';

  var http, iced, search, shorten, util, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = __iced_k_noop = function() {};

  util = require('util');

  http = require('http');

  shorten = require('goo.gl');

  module.exports = function() {
    var _this = this;
    return this.register_special_command({
      name: 'g',
      description: 'Perform a web search using Google.',
      admin_only: false,
      fn: function(event, input_data, output_data) {
        var err, message, response, results, results_uri, shorten_err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "irc-js-bot-google\index.coffee",
            funcname: "fn"
          });
          search(input_data.args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return response = arguments[1];
              };
            })(),
            lineno: 27
          }));
          __iced_deferrals._fulfill();
        })(function() {
          results = response.responseData.results;
          (function(__iced_k) {
            if (err) {
              return __iced_k(message = 'Oops, something went wrong!');
            } else {
              (function(__iced_k) {
                if (!results[0]) {
                  return __iced_k(message = "No results for query '" + input_data.args + "'");
                } else {
                  (function(__iced_k) {
                    if (results) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "irc-js-bot-google\index.coffee",
                          funcname: "fn"
                        });
                        shorten(response.responseData.cursor.moreResultsUrl, __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              shorten_err = arguments[0];
                              return results_uri = arguments[1];
                            };
                          })(),
                          lineno: 35
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        return __iced_k(message = "Google says \"" + results[0].titleNoFormatting + "\" • " + results[0].unescapedUrl + " • More results: " + results_uri);
                      });
                    } else {
                      return __iced_k();
                    }
                  })(__iced_k);
                }
              })(__iced_k);
            }
          })(function() {
            return _this.send(output_data.method, output_data.recipient, message);
          });
        });
      }
    });
  };

  search = function(query, cb) {
    var req, result;
    query += ' -site:w3schools.com -site:tizag.com';
    result = [];
    req = http.request({
      hostname: 'ajax.googleapis.com',
      path: "/ajax/services/search/web?v=1.0&q=" + (encodeURIComponent(query)),
      method: 'get'
    }, function(res) {
      res.setEncoding('utf-8');
      res.on('data', function(data) {
        return result.push(data);
      });
      return res.on('end', function() {
        var err;
        result = result.join('');
        result = JSON.parse(result);
        if (!result) err = true;
        return cb(err, result);
      });
    });
    req.on('error', function(err) {
      return cb(err, null);
    });
    return req.end();
  };

}).call(this);
